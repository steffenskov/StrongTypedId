name: "Continuous Deployment"

on: 
  push:
    tags:
    - 'v*'

env:
  PROJECT_PATH: 'src/StrongTypedId/StrongTypedId.csproj'
  NEWTON_PROJECT_PATH: 'src/StrongTypedId.NewtonSoft/StrongTypedId.NewtonSoft.csproj'
  EF_PROJECT_PATH: 'src/StrongTypedId.EntityFrameworkCore/StrongTypedId.EntityFrameworkCore.csproj'
  DAPPER_PROJECT_PATH: 'src/StrongTypedId.Dapper.DDD.Repository/StrongTypedId.Dapper.DDD.Repository.csproj'
  SOLUTION_PATH: 'StrongTypedId.sln'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  test:
    name: 'test'
    runs-on: 'ubuntu-latest'
        
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'Install dotnet'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: 'Restore packages'
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Test
      run: dotnet test ${{ env.SOLUTION_PATH }}

  deploy:
    needs: test
    runs-on: 'ubuntu-latest'

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2
      
    - name: 'Install dotnet'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: 'Restore packages'
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: 'Build project'
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release
      
    - name: 'Get version'
      id: version
      uses: battila7/get-version-action@v2
      
    - name: 'Pack main project'
      run: dotnet pack ${{ env.PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg -p:PackageVersion=${{ steps.version.outputs.version-without-v }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: 'Pack NewtonSoft extension'
      run: dotnet pack ${{ env.NEWTON_PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg -p:PackageVersion=${{ steps.version.outputs.version-without-v }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: 'Pack EntityFramework extension'
      run: dotnet pack ${{ env.EF_PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg -p:PackageVersion=${{ steps.version.outputs.version-without-v }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: 'Pack Dapper.DDD.Repository extension'
      run: dotnet pack ${{ env.DAPPER_PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg -p:PackageVersion=${{ steps.version.outputs.version-without-v }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
    - name: 'Push package'
      run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s ${{ env.NUGET_SOURCE_URL }}
